#!/bin/bash

SCRIPT_PATH="$(readlink -f -- $BASH_SOURCE)"
NODE_CWD="$(dirname -- $SCRIPT_PATH)"

# DEFAULTS
SAVE_OUT="yes"
USER_CWD="$(npm prefix)"
USER_PWD="$PWD"
OUT_DIR=./
OUT_FILE=
OVERWRITE_EXISTING=
DRY_RUN=
DEBUG_READMEGEN=
INFILE="package.json"
PROGVERSION=0.0.1
PROGNAME=${0##*/}
POSITIONAL=()

READMEGEN_ENV="{\"overwrite_existing\":\"$OVERWRITE_EXISTING\",\"input\":\"$INFILE\",\"debug\":\"$DEBUG_READMEGEN\",\"user_cwd\":\"$USER_CWD\",\"user_pwd\":\"$USER_PWD\",\"node_cwd\":\"$NODE_CWD\",\"out_file\":\"$OUT_FILE\",\"dry_run\":\"$DRY_RUN\"}"


_is_pipe () {
  if [ -t 0 ]; then
    echo "interactively"
  else
    echo "pipe or file"
  fi
}


_has_data () {
  while read -r line ; do
    #echo $line
    if [ -z "$line" ]; then
      # echo "line is empty continue"
    continue
    else
      # echo "input was found $line"
      echo "1"
      return 1
    fi
  done
  # echo "no input was found"
  return 0
}

_is_error () {
  if [ ! $PIPESTATUS -eq 0 ]; then
    echo "Process exited with status code $?"
    echo "$?"
    echo "$0"
    exit "$PIPESTATUS"
  else
    return
  fi
}


_show_help () {
  echo -e "\n  readme-generator - readme generator utility from npm package.json file\n"
  echo -e "  [Usage]\n"
  echo -e "  runtime_options [options] PAGE"
  echo -e "\n  [Options]\n"
  echo -e " -h --help                    show command usage and options"
  echo -e " -v --version                 show package version"
  echo -e " -i --input <file>            use file to configure readme (default: package.json)"
  echo -e " -o --output <file>           save output to file (default: README.md)"
  echo -e "    --dry-run                 output to stdout instead of saving to file"
  echo -e "    --verbose                 display more verbose messages to stdout"
  echo -e "\n"
}

_generate_readme () {
  echo "node $NODE_CWD/../index.js"
  READMEGEN_ENV=$READMEGEN_ENV node $NODE_CWD/../index.js --
}

_dump_debug_vars () {
  echo "DEBUG_READMEGEN=$DEBUG_READMEGEN"
  echo "DRY_RUN=$DRY_RUN"
  echo "EDIT_MDOUT=$EDIT_MDOUT"
  echo "INFILE=$INFILE"
  echo "MAN_FILE=$MAN_FILE"
  echo "NODE_CWD=$NODE_CWD"
  echo "OUT_DIR=$OUT_DIR"
  echo "OUT_FILE=$OUT_FILE"
  echo "RENDER_MDOUT=$RENDER_MDOUT"
  echo "SAVE_MDOUT=$SAVE_MDOUT"
  echo "USER_CWD=$USER_CWD"
  echo "USER_PWD=$USER_PWD"
}



_cleanup () {
  # unset PWD
  unset DEBUG_READMEGEN
  unset DRY_RUN
  unset EDIT_MDOUT
  unset INFILE
  unset NODE_CWD
  unset OUT_DIR
  unset OUT_FILE
  unset POSITIONAL
  unset PROGNAME
  unset PROGVERSION
  unset READMEGEN_ENV
  unset SAVE_HTML
  unset SAVE_MDOUT
  unset USER_CWD
  unset USER_PWD
}



# Handle No Argumets given to command
# -----------------------------------
# if [ $# == 0 ]; then
  # Check if interactive, tty, or pipe
  # echo -e "process is tty or pipe?: $(_is_pipe)"
  # check if stdin has data
  # DATA_IN="$(_has_data)"
  #  echo -e "process has data?: $DATA_IN"

  # if [[ "$DATA_IN" ]]; then
    # echo "DATA_IN is TRUE";
     # _generate_readme
    # exit 0
    # if passes previous check if errors
  #   echo -e "process has errors?: $(_is_error)"
  #   _show_help
  # fi
# fi

while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -h|--help)
       _show_help
       exit 0
       ;;
    -v|--version)
       echo "Version $PROGVERSION"
       exit 0
       ;;
    --dry-run)
      DRY_RUN="yes"
      shift
      ;;
    --debug)
      DEBUG_READMEGEN="yes"
      shift
      ;;
    --force)
      OVERWRITE_EXISTING="yes"
      shift
      ;;
    -i|--input)
      MAN_FILE="$2"
      shift
      shift
      ;;
    -o|--output)
      OUTPUT="yes"
      OUT_FILE="$2"
      shift
      shift
       ;;
    --)
       shift
       break
       ;;
    *)
      MAN_PAGE=$key
      shift
      ;;
   esac
done


READMEGEN_ENV="{\"overwrite_existing\":\"$OVERWRITE_EXISTING\",\"input\":\"$INFILE\",\"debug\":\"$DEBUG_READMEGEN\",\"user_cwd\":\"$USER_CWD\",\"user_pwd\":\"$USER_PWD\",\"node_cwd\":\"$NODE_CWD\",\"out_file\":\"$OUT_FILE\",\"dry_run\":\"$DRY_RUN\"}"


if [ "$DEBUG_READMEGEN" = "yes" ]; then
  _dump_debug_vars
  NODE_DEBUG="index.js"
fi

# MAIN PROCESS
# -----------------------------------------------------------------------------
if [ "$OUTPUT" = "yes" ]; then
  # TODO: HANDLE FILE WRITING FROM NODE
  # READMEGEN_ENV=$READMEGEN_ENV _generate_readme $MAN_PAGE > $OUT_FILE
  READMEGEN_ENV=$READMEGEN_ENV _generate_readme
else
  READMEGEN_ENV=$READMEGEN_ENV _generate_readme
fi

_cleanup
exit 0
